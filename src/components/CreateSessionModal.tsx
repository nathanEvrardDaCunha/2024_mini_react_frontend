import { useState } from "react";import { Button, Col, Form, Modal, Row } from "react-bootstrap";import axios from "axios";interface Session {	id: string;	theme: string;	duration: number;	startDate: string;	endDate: string;	price: number;	minimalClient: number;	employeeId: string;	status: string;}interface CreateSessionModalProps {	show: boolean;	onClose: () => void;	onCreate: (newSession: Omit<Session, 'id'>) => Promise<void>;}const CreateSessionModal: React.FC<CreateSessionModalProps> = ({ show, onClose, onCreate }) => {	const [theme, setTheme] = useState('');	const [startDate, setStartDate] = useState('');	const [startHour, setStartHour] = useState('');	const [price, setPrice] = useState(10);	const [minimalClient, setMinimalClient] = useState(2);	const [error, setError] = useState('');		const handleSubmit = async (e: React.FormEvent) => {		e.preventDefault();		const [selectedStartHour, startMinute] = startHour.split(':');		const startDateTime = new Date(startDate);		startDateTime.setHours(parseInt(selectedStartHour), parseInt(startMinute));				const timezoneOffset = -120;		const localStartDateTime = new Date(startDateTime.getTime() - timezoneOffset * 60 * 1000);				const duration = 60;		const endDateTime = new Date(localStartDateTime.getTime() + duration * 60 * 1000);		const status = "available";				const newSession: Omit<Session, 'id'> = {			theme,			duration,			startDate: localStartDateTime.toISOString(),			endDate: endDateTime.toISOString(),			price,			minimalClient,			employeeId: '',			status,		};				try {			await onCreate(newSession);			setError('');			onClose();		} catch (error) {			if (axios.isAxiosError(error) && error.response) {				setError(error.response.data.error);			} else {				setError('Error creating session');			}		}	};		return (		<Modal show={show} onHide={onClose} size="lg" centered>			<Modal.Header closeButton>				<Modal.Title>Create Session</Modal.Title>			</Modal.Header>			<Modal.Body>				{error && <p className="text-danger">{error}</p>}				<Form onSubmit={handleSubmit}>					<Row>						<Col md={6}>							<Form.Group controlId="theme" className="mb-3">								<Form.Label>Theme</Form.Label>								<Form.Control									type="text"									value={theme}									onChange={(e) => setTheme(e.target.value)}									required									placeholder="Enter session theme"								/>							</Form.Group>						</Col>						<Col md={6}>							<Form.Group controlId="price" className="mb-3">								<Form.Label>Price</Form.Label>								<Form.Control									type="number"									min={10}									value={price}									onChange={(e) => setPrice(parseInt(e.target.value))}									required									placeholder="Enter session price"								/>							</Form.Group>						</Col>					</Row>					<Row>						<Col md={6}>							<Form.Group controlId="startDate" className="mb-3">								<Form.Label>Start Date</Form.Label>								<Form.Control									type="date"									value={startDate}									onChange={(e) => setStartDate(e.target.value)}									required								/>							</Form.Group>						</Col>						<Col md={6}>							<Form.Group controlId="startHour" className="mb-3">								<Form.Label>Start Hour</Form.Label>								<Form.Control									type="time"									value={startHour}									onChange={(e) => setStartHour(e.target.value)}									required								/>							</Form.Group>						</Col>					</Row>					<Form.Group controlId="minimalClient" className="mb-3">						<Form.Label>Minimal Clients</Form.Label>						<Form.Control							type="number"							min={2}							value={minimalClient}							onChange={(e) => setMinimalClient(parseInt(e.target.value))}							required							placeholder="Enter minimal number of clients"						/>					</Form.Group>					<div className="d-grid">						<Button variant="primary" type="submit" size="lg">							Create Session						</Button>					</div>				</Form>			</Modal.Body>		</Modal>	);};export default CreateSessionModal;