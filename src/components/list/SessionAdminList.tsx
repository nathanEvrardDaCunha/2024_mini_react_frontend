import React, { useEffect, useState } from 'react';import axios from 'axios';import SessionTable from '../table/SessionTable';import LoadingSpinner from './LoadingSpinner';import ErrorMessage from '../message/ErrorMessage';import CreateSessionModal from '../CreateSessionModal';import EditSessionModal from '../EditSessionModal';import HeadingH2 from "../text/HeadingH2";import CreateButton from "../button/CreateButton";interface Session {	id: string;	theme: string;	duration: number;	startDate: string;	endDate: string;	price: number;	minimalClient: number;	employeeId: string;	status: string;}const SessionAdminList = () => {	const [sessions, setSessions] = useState<Session[]>([]);	const [loading, setLoading] = useState(true);	const [error, setError] = useState<string | null>(null);	const [showModal, setShowModal] = useState(false);	const [selectedSession, setSelectedSession] = useState<Session | null>(null);	const [showEditModal, setShowEditModal] = useState(false);		useEffect(() => {		fetchSessions();	}, []);		const fetchSessions = async () => {		try {			const response = await axios.get('http://localhost:3000/session');			setSessions(response.data);			setLoading(false);		} catch (error) {			setError('Error fetching sessions');			setLoading(false);		}	};		const deleteSession = async (sessionId: string) => {		try {			await axios.delete(`http://localhost:3000/session/${sessionId}`);			setSessions((prevSessions) =>				prevSessions.filter((session) => session.id !== sessionId)			);			setError(null);		} catch (error) {			if (axios.isAxiosError(error) && error.response) {				setError(error.response.data.error);			} else {				setError('Error deleting session');			}		}	};		const createSession = async (newSession: Omit<Session, 'id'>) => {		try {			const response = await axios.post('http://localhost:3000/session', newSession);			setSessions((prevSessions) => [...prevSessions, response.data]);			setShowModal(false);			setError(null);		} catch (error) {			if (axios.isAxiosError(error) && error.response) {				setError(error.response.data.error);			} else {				setError('Error creating session');			}		}	};		const editSession = async (updatedSession: Session) => {		try {			const response = await axios.put(`http://localhost:3000/session/${updatedSession.id}`, updatedSession);			setSessions((prevSessions) =>				prevSessions.map((session) => (session.id === response.data.id ? response.data : session))			);			setShowEditModal(false);			setError(null);		} catch (error) {			if (axios.isAxiosError(error) && error.response) {				setError(error.response.data.error);			} else {				setError('Error updating session');			}		}	};		const openEditModal = (session: Session) => {		setSelectedSession(session);		setShowEditModal(true);	};		if (loading) {		return <LoadingSpinner />;	}		return (		<div className="container my-5">			<HeadingH2 text="Session List" />			{error && <ErrorMessage message={error} />}			<div className="text-end mb-3">				<CreateButton onClick={() => setShowModal(true)} />			</div>			<SessionTable sessions={sessions} onDelete={deleteSession} onEdit={openEditModal} />			<CreateSessionModal				show={showModal}				onClose={() => setShowModal(false)}				onCreate={createSession}			/>			{selectedSession && (				<EditSessionModal					show={showEditModal}					onClose={() => setShowEditModal(false)}					onEdit={editSession}					session={selectedSession}				/>			)}		</div>	);};export default SessionAdminList;