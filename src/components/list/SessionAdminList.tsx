import React, { useEffect, useState } from 'react';import axios from 'axios';import SessionTable from '../table/SessionTable';import LoadingSpinner from './LoadingSpinner';import ErrorMessage from '../message/ErrorMessage';import CreateSessionModal from '../CreateSessionModal';interface Session {	id: string;	theme: string;	startDate: string;	endDate: string;	price: number;	minimalClient: number;	employeeId: string;}const SessionAdminList = () => {	const [sessions, setSessions] = useState<Session[]>([]);	const [loading, setLoading] = useState(true);	const [error, setError] = useState<string | null>(null);	const [showModal, setShowModal] = useState(false);		useEffect(() => {		fetchSessions();	}, []);		const fetchSessions = async () => {		try {			const response = await axios.get('http://localhost:3000/session');			setSessions(response.data);			setLoading(false);		} catch (error) {			setError('Error fetching sessions');			setLoading(false);		}	};		const deleteSession = async (sessionId: string) => {		try {			await axios.delete(`http://localhost:3000/session/${sessionId}`);			setSessions((prevSessions) =>				prevSessions.filter((session) => session.id !== sessionId)			);			setError(null);		} catch (error) {			setError('Error deleting session');		}	};		const createSession = async (newSession: Omit<Session, 'id'>) => {		try {			const response = await axios.post('http://localhost:3000/session', newSession);			setSessions((prevSessions) => [...prevSessions, response.data]);			setShowModal(false);			setError(null);		} catch (error) {			if (axios.isAxiosError(error) && error.response) {				setError(error.response.data.error);			} else {				setError('Error creating session');			}		}	};		if (loading) {		return <LoadingSpinner />;	}		return (		<div className="container my-5">			<h2 className="text-center mt-5 mb-4">Session List</h2>			{error && <ErrorMessage message={error} />}			<div className="text-end mb-3">				<button className="btn btn-primary" onClick={() => setShowModal(true)}>					Create				</button>			</div>			<SessionTable sessions={sessions} onDelete={deleteSession} />			<CreateSessionModal				show={showModal}				onClose={() => setShowModal(false)}				onCreate={createSession}			/>		</div>	);};export default SessionAdminList;